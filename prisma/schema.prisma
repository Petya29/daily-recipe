// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // none-next-auth
    likes     RecipeLike[]
    recipes   Recipe[]
    followers User[]       @relation(name: "Followers")
    follows   User[]       @relation(name: "Followers")
    bookmarks Bookmark[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Recipe {
    id             String       @id @default(uuid())
    userId         String
    title          String       @db.Text
    description    String       @db.Text
    image          String       @db.Text
    readyInMinutes Int
    vegan          Boolean
    vegetarian     Boolean
    veryHealthy    Boolean
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    ingredients    Ingredient[]
    likes          RecipeLike[]
    bookmarks      Bookmark[]

    @@index([userId])
}

model Ingredient {
    id          String @id @default(uuid())
    recipeId    String
    title       String @db.Text
    description String @db.Text
    image       String @db.Text
    measures    String @db.Text
    recipe      Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@index([recipeId])
}

model Bookmark {
    userId   String
    recipeId String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([userId, recipeId])
    @@index([userId])
    @@index([recipeId])
}

model RecipeLike {
    userId   String
    recipeId String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([userId, recipeId])
    @@index([userId])
    @@index([recipeId])
}
