// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id        String   @id @default(cuid())
    userId    String
    provider  String
    password  String
    email     String   @unique
    name      String
    avatar    String
    lastLogin DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id        String    @id @default(cuid())
    name      String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    role      Role      @default(USER)
    accounts  Account[]

    // none-next-auth
    likes     RecipeLike[]
    recipes   Recipe[]
    followers User[]       @relation(name: "Followers")
    follows   User[]       @relation(name: "Followers")
    bookmarks Bookmark[]
    tokens    Token[]
}

model Token {
    id        String   @id @default(cuid())
    userId    String
    token     String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([id, token])
    @@index([userId])
}

model Recipe {
    id             String       @id @default(uuid())
    userId         String
    title          String       @db.Text
    description    String       @db.Text
    image          String       @db.Text
    readyInMinutes Int
    vegan          Boolean
    vegetarian     Boolean
    veryHealthy    Boolean
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    ingredients    Ingredient[]
    likes          RecipeLike[]
    bookmarks      Bookmark[]

    @@index([userId])
}

model Ingredient {
    id          String   @id @default(uuid())
    recipeId    String
    title       String   @db.Text
    description String   @db.Text
    image       String   @db.Text
    measures    String   @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@index([recipeId])
}

model Bookmark {
    userId    String
    recipeId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([userId, recipeId])
    @@index([userId])
    @@index([recipeId])
}

model RecipeLike {
    userId    String
    recipeId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)

    @@id([userId, recipeId])
    @@index([userId])
    @@index([recipeId])
}

enum Role {
    USER
    MANAGER
    ADMIN
}
